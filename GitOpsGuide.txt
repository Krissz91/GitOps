# GitOps bevezetes-----------------------------------------------------------------------------------

Mi az a GitOps?
  - A GitOps a DevOps egy alcsoportja, és egy olyan stratégia, amely a mai kor igényeihez igazodik.
  - Lényege, hogy mindent kódban kell tárolni, és ezt a kódot a Git (verziókezelő rendszer) kezeli.
  - A változtatásokat kizárólag a Giten keresztül lehet alkalmazni.

Miért van rá szükség?
  - A GitOps egy gyakori automatizálási problémát old meg: a változások nyomon követését.
  - Problémát jelent a kézi módosítások végzése az automatizált infrastruktúrán, ami elsodródáshoz vezethet (az infrastruktúra eltér az automatizált állapottól).
  - Hiányzik a változások előzménye (ki, mikor, mi volt a kimenet), és nehéz ezeket egy helyen nyomon követni.
  - A mikroszolgáltatás-architektúra nagy komplexitással jár, ami rendszeres változtatásokat igényel mind az alkalmazás, mind az infrastruktúra szintjén.

Hogyan működik a GitOps?
  - Minden kód a Gitben van: Az alkalmazáskód, a CI/CD automatizálási kód (pl. Jenkins pipeline),
    és az infrastruktúra automatizálási kód (pl. Terraform, CloudFormation) is Git tárolókban kerül tárolásra.
  - Verziózott változások: Ennek köszönhetően minden változás verziózott és nyomon követhető.
  - Korlátozott hozzáférés: Az adminisztrátorok és a DevOps/SRE csapat csak a Githez kap hozzáférést, az infrastruktúrához közvetlenül nem.
    Ez megakadályozza a kézi módosításokat.
  - GitOps eszközök: Vannak speciális eszközök (pl. GitHub Actions, GitLab, ArgoCD, Tekton, Jenkins X), amelyek figyelik a Git tárolókban lévő kód változásait,
    és automatikusan alkalmazzák azokat az infrastruktúrán, a pipeline-okban és az alkalmazásokon.

A GitOps lényege egyszerűen:
Ahelyett, hogy a rendszermérnökök közvetlenül módosítanák az infrastruktúrát, minden változást a Gitben lévő kódban kell rögzíteni.
Ezeket a változásokat aztán GitOps eszközök automatikusan alkalmazzák, biztosítva a nyomon követhetőséget, a konzisztenciát és a kézi hibák kiküszöbölését.

# Projekt Architektúra – CI/CD két GitHub tárolóval------------------------------------------------

+------------------+         +---------------------------------------------+         +------------------+
|   Visual Studio  |         |             GitHub - Terraform Repo        |         | GitHub - App Repo |
|     Code (VSCode)|         |  GitHub Actions (Terraform Workflow)       |         | Build/Test/Deploy |
+--------+---------+         +-----------------------------+---------------+         +---------+--------+
         |                                               |                                     |
         | commit                                        |                                     |
         |                                               |                                     |
         v                                               v                                     v
+----------------------+         +-----------------------------+               +-----------------------------+
| Fetch stage branch   |         |  Terraform plan & validate  |               |        Fetch code           |
+----------------------+         +-----------------------------+               +-----------------------------+
         |                                               |                                     |
         |                                               v                                     v
         |                                     +------------------+                  +------------------------+
         |                                     | Pull Request →   |                  |       Maven build      |
         |                                     |     Merge to main|                  |      & test (quality)  |
         |                                     +------------------+                  +------------------------+
         |                                               |                                     |
         v                                               v                                     v
+----------------------------+     +------------------------------+              +---------------------------+
| Terraform main branch      | --> |   terraform apply            |              |   SonarCloud analysis     |
+----------------------------+     +------------------------------+              +---------------------------+
         |                                                              	      |
         v                                                              	      v
+--------------------------------------------+       +------------------------+  +---------------------------+
|             AWS Cloud                      | <---- | Amazon ECR (image repo)|<--|       Docker build       |
|                                            |       +------------------------+  +---------------------------+
|  +----------------------+                  |
|  | Amazon EKS Cluster    | <--- Helm Charts (includes image tag) ------------+
|  |  with VPC subnet      |                 |
|  +----------------------+                  |
+--------------------------------------------+

Áttekintés:
Két GitHub repository:
  infrastructure-repo -> Terraform kód
  application-repo -> Alkalmazás (Java, Docker, Helm)

Minden repo saját GitHub Actions workflow-val rendelkezik.
Minden fejlesztés a VS Code segítségével történik.

1. Infrastruktúra Workflow (Terraform)
Tároló: infrastructure-repo
CI/CD eszköz: GitHub Actions
Lépések:
  1. Fejlesztés: VSCode -> Staging ág
  
  2. GitHub Actions Workflow:
      terraform validate
      terraform plan
      Eredmények megtekintése, de nincs módosítás

  3. Pull Request staging -> main

  4. Approval/jóváhagyás & Merge/beolvad

  5. Deploy/Telepítés: terraform apply
      -> Provisioning: AWS VPC, EKS Cluster

2. Alkalmazás Workflow (Build, Test & Deploy)
Tároló: application-repo
CI/CD eszközök: GitHub Actions, SonarCloud, Maven, Docker, Helm
Lépések:
  1. Fejlesztés: VSCode -> commit -> GitHub
  2. GitHub Actions Workflow:
      Maven build & test
      SonarCloud analysis (quality gate)
      Docker build
      Push image -> Amazon ECR
      Deploy image -> EKS Helm Chart
        Helm chart -> automatikus image tag frissítés

Infrastruktúra komponensek (AWS):
  Amazon EKS (Kubernetes Cluster)
  Amazon ECR (Docker image repository)
  VPC subnet (hálózat)

Megjegyzés:
  A staging ágban történik a validáció, a main ágba kerül minden véglegesítés.
  Helm Chart automatikusan figyeli az image tag változást.
  A teljes folyamat automatizált CI/CD pipeline-on keresztül történik.

# Prepare GitHub Repository – Lépésről lépésre-----------------------------------------------------

1. Fork & Clone – Tárolók előkészítése
    Nyisd meg a GitHub oldalt és jelentkezz be.
    Navigálj az alábbi URL-re: https://github.com/username/iac-vprofile
    Kattints a legördülő menüre és válaszd: "Create new fork"
    Vedd ki a pipát a "Copy the main branch only" opció elől – szükség van main és stage ágakra is.
    Kattints a "Create Fork" gombra.
    Ismételd meg a folyamatot a másik repository-val: https://github.com/username/vprofile-action
    Kattints a legördülő menüre és válaszd: "Create new fork"
    (Ebben csak a main ág van, ott nem baj, ha marad a pipa.)
    Kattints a "Create Fork" gombra.

2. SSH kulcs generálása és hozzáadása GitHub-hoz
   Nyisd meg a Git Bash (Windows) vagy Terminal (Mac) alkalmazást.
  
cd ~/.ssh	# Navigálj az SSH mappába
ssh-keygen	# Hozz létre új SSH kulcsot: add meg a fájlnevet pl. actions, majd Enter többször
ls		# Látható lesz az action és actions.pub fájlok.
cat actions.pub	# Másold ki a nyilvános kulcs tartalmát:

3. SSH kulcs hozzáadása GitHub-hoz
    GitHub jobb felső sarok -> Settings
    Navigálj ide: "SSH and GPG keys" -> "New SSH key"
    Adj nevet pl.: actionskey, és illeszd be a nyilvános kulcs tartalmát a key inputba.
    Kattints: "Add SSH key"
    Add meg GitHub jelszavad, ha kéri.

4. SSH konfiguráció a Git számára
   A privát kulcs használatához futtasd az alábbi parancsot:

export GIT_SSH_COMMAND="ssh -i ~/.ssh/actions"

5. Mappastruktúra előkészítése
Hozd létre a cél mappát, pl.:

mkdir ~/Desktop/Krissz91
cd ~/Desktop/Krissz91

6. Klónozd a tárolókat SSH-val
  IAC repo:
    Navigálj az alábbi URL-re: https://github.com/username/iac-vprofile
    Kattints a Code-ra és az ssh URL-t másold ki és a mappaban (/Desktop/Krissz91) a git clone parancs után máasold be az URL-t.
    git clone git@github.com:username/iac-vprofile.git

  Action repo:
    Navigálj az alábbi URL-re: https://github.com/username/vprofile-action
    Kattints a Code-ra és az ssh URL-t másold ki és a mappaban (/Desktop/Krissz91) a git clone parancs után máasold be az URL-t.
    git clone git@github.com:username/vprofile-action.git
    ls paranccsal ellenőrizzük, hogy megvan-e a kettő mappa vprofile-action és iac-vprofile

7. Git repo konfigurálása az SSH kulcs használatára
Menj be a repo könyvtárába, pl.:

cd iac-vprofile
git config core.sshCommand "ssh -i ~/.ssh/actions -F /dev/null"

Ugyanezt ismételd meg a másik repo mappájában is.

cd ../vprofile-action/
git config core.sshCommand "ssh -i ~/.ssh/actions -F /dev/null"

8. (Opcionális) Git globális konfiguráció
Ha még nincs beállítva:

git config --global user.name "<GitHub-felhasználónév>"
git config --global user.email "<user@email.com>"

9. Másolat készítése staging/fő ágra bontva
Készíts másolatot a staging céljára:

cd ..
ls				# itt kell, hogy legyél /Desktop/Krissz91 és a két mappat kell,hogy lásd vprofile-action és iac-vprofile
cp -r iac-vprofile main-iac	# Most már három mappa van vprofile-action, iac-vprofile és main-iac

10. Ágak kezelése
Ellenőrizd az elérhető ágakat:

cd iac-vprofile
git branch -a		# Látjuk az ágakat és azt is amiben vagyunk
git checkout stage	# Váltás a stage ágra
ls
git status		# On branch stage

11. Általános szabály:
  Minden fejlesztést a stage branchben végezz!
  Ha kész és tesztelt a változtatás, merge a main ágba.
  A main ághoz tartozik a Terraform apply -> infrastruktúra változások.

# GitHub Secrets – Lépésenkénti útmutató-------------------------------------------------------------

Általános áttekintés
  Most AWS hozzáférési kulcsokat, egy S3 vödröt, és egy ECR tárolót fogunk létrehozni.
  Ezeket az információkat GitHub Secrets-ben tároljuk, két tárolóban:
    iac-vprofile
    vprofile-action

GitHub Secrets előkészítése
  1. Nyisd meg mindkét GitHub repository-t: iac-vprofile és vprofile-action.
  2. Navigálj ide:
       Settings -> Secrets and variables -> Actions
  3. Hagyd nyitva mindkét fülön, mert hamarosan ide kell másolni a kulcsokat.

IAM felhasználó létrehozása (AWS)
  1. Lépj be az AWS konzolra.
  2. Válassz egy régiót – ezt a projekt végéig tartsd meg. (us-east-1)
  3. Menj az IAM szolgáltatáshoz:
       Users -> Create user
  4. Nevezd el pl. gitops
  5. Jogosultság:
       Attach policies directly -> válaszd a AdministratorAccess jogosultságot.
       (Ez nem ajánlott éles környezetben, csak oktatási célból történik.)

Hozzáférési kulcs létrehozása
  1. Kattints a felhasználóra -> Security credentials
  2. Görgess le -> Create access key -> válaszd a CLI opciót
  3. Hozz létre kulcsot -> másold le az Access key ID-t és a Secret Access key-t.

Ne töltsd le a CSV fájlt és ne tárold helyben – titkosítási szivárgás elkerülése érdekében.

Secrets hozzáadása: iac-vprofile
  1. Menj a iac-vprofile repo-ba -> Settings -> Secrets and variables -> Actions
  2. Hozz létre új titkokat:
       AWS_ACCESS_KEY_ID -> ide illeszd be az access key-t.
       AWS_SECRET_ACCESS_KEY -> ide a titkos kulcsot.
       BUCKET_TF_STATE -> ide az S3 vödör nevét (lásd következő pont).

S3 vödör létrehozása
  1. Menj az S3 szolgáltatáshoz -> Create bucket
  2. Adj egyedi nevet pl. vprofileactions91 (egyedi legyen)
  3. Figyelj arra, hogy ugyanabban a régióban legyen, mint amit korábban választottál.
  4. A vödör nevét másold be a BUCKET_TF_STATE GitHub Secret-be (csak az iac-vprofile repo-ba).

Secrets hozzáadása: vprofile-action
  1. Menj a vprofile-action repo-ba -> Settings -> Secrets and variables -> Actions
  2. Hozz létre új titkokat:
       AWS_ACCESS_KEY_ID
       AWS_SECRET_ACCESS_KEY
       REGISTRY -> ide az ECR URL kerül (lásd következő pont).

ECR tároló létrehozása
  1. Menj az ECR szolgáltatáshoz -> Create repository
  2. Adj nevet pl. vprofileapp -> Create repository
  3. Másold ki az ECR URI-t (pl. 123456789012.dkr.ecr.us-east-1.amazonaws.com/vprofileapp)
       Ne tartalmazza az utolsó részt /vprofileapp, csak az URI részt!
  4. Illeszd be a REGISTRY Secret változóba a vprofile-action repo-ban.

Összefoglalás: Titkok összesítése

iac-vprofile titkai:
  AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY
  BUCKET_TF_STATE

vprofile-action titkai:
  AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY
  REGISTRY

# Terraform projekt áttekintés---------------------------------------------------------------------
  A Terraform kód két fő dolgot hoz létre:
    VPC infrastruktúra
    EKS fürt
  Az iac-vprofile nevű tárolót nyisd meg a VS Code-ban.
  A kódot nem magunk írjuk meg teljesen, hanem meglévő modulokra építjük.
  A kódot GitHub Actions futtatja majd, így fontos, hogy stabil legyen és elkerüljük a duplikált erőforrásokat.

Miért nem futtatjuk közvetlenül?
  Hiba esetén részben létrejöhetnek erőforrások (VPC, EKS, KMS kulcsok).
  Újrafuttatás duplikálhatja őket, ami költséges (főleg NAT gateway és EKS).
  Ezért:
    Előre megírt, dokumentált modulokat használunk.
    Teszteld helyben, mielőtt GitHub Actionsből futtatod.

Ágkezelés (branching)
  Staging ágon dolgozz mindig, ne a main ágon!
  Ellenőrizd az ágat a VS Code-ban, válts stagingre, ha szükséges.

variables.tf fájl
  Két változó van:
    region -> us-east-1
    cluster_name -> például vprofile-eks
  Mentés: Ctrl + S

terraform.tf fájl
  Használt verziók:
    Terraform: 1.6.3
    AWS provider: 5.x
  Ajánlott nem változtatni a verziókon, mert ezek stabilak, teszteltek.
  Backend (S3):
    Állapot (terraform.tfstate) tárolása központilag, S3-ban.
    Szükséges paraméterek:
      Bucket neve (vprofileactions91)
      Kulcs (terraform.tfstate)
      Régió (us-east-1)
  Miért fontos? Mert a GitHub Actions konténere nem tartja meg lokálisan az állapotot.

vpc.tf fájl – VPC modul használata
  Forrás: Terraform AWS VPC modul
  Paraméterek:
    vpc_name, cidr, availability_zones (slice függvény adja)
    private_subnets, public_subnets
    enable_nat_gateway = true
    single_nat_gateway = true (költségcsökkentés!)
    enable_dns_hostnames = true
  Címkék (az EKS működéséhez szükségesek):
    Public subnet címkék:
      kubernetes.io/cluster/<cluster_name> = shared
      kubernetes.io/role/elb = 1
    Private subnet címke:
      kubernetes.io/role/internal-elb = 1

ekscluster.tf fájl – EKS modul
  Forrás: https://registry.terraform.io/modules/terraform-aws-modules/eks/aws/latest
  Modul verzió: 19.1
  Beállítások:
    cluster_name, cluster_version
    vpc_id = module.vpc.vpc_id
    subnet_ids = module.vpc.private_subnets
    cluster_endpoint_public_access = true
  Kezelt csomópontcsoportok (managed node groups):
    Két csoport:
      node-group-1
        instance_type = t3.small
        min_size = 1, max_size = 3, desired_size = 2
      node-group-2
        instance_type = t3.small
        min_size = 1, max_size = 2, desired_size = 1

outputs.tf fájl – Kimenetek
  Kinyomtatott értékek:
    cluster_name -> module.eks.cluster_name
    cluster_endpoint -> module.eks.cluster_endpoint
    region -> var.region
    security_group_id

Gyakorlati tanácsok:
  A projekt fő fókusza: GitHub Actions munkafolyamat.
  Először mindig teszteld a staging ágon.
  Ha minden működik, merge a main ágba, és csak akkor alkalmazd.
  Változások, amiket el kell menteni:
    variables.tf -> cluster név frissítése
    terraform.tf -> bucket név beállítása
  
Mentés:
  VSCode-ban ctrl+s az összes .tf fájlnál -> Source Control -> Commit&Push
  Commit üzenet javaslat:
  "Bucket name & Cluster name updated"
   pipa -> save
  Vagy ha terminálban csináltad akkor
    git add .
    git commit -m "Bucket name & Cluster name updated"
    git push origin stage

# GitHub Actions – Alapok és első munkafolyamat----------------------------------------------------

Bevezetés:
  A GitHub Actions lehetővé teszi CI/CD folyamatok létrehozását közvetlenül a GitHub tárolón belül.
  Nincs szükség különálló CI/CD eszközökre, mint a Jenkins.

Munkafolyamat (workflow) létrehozása VSCode-ban:
  1. A munkafolyamat YAML fájl formájában készül.
  2. Mappa struktúra a tároló gyökerében (iac-vprofile):
       .github/workflows
  3. Példa fájl: terraform.yml (iac-vprofile/.github/workflows/terraform.yml)

Munkafolyamat felépítése
  1. Név megadása:

name: "Vprofile IAC"

  2. Esemény, ami elindítja (triggereli):

on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

  3. Környezeti változók (environment variables)
       YAML szinten definiálva env: kulcsszó alatt.
       Használt titkos kulcsok a GitHub Secrets-ben tárolva:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: "us-east-1"
  EKS_CLUSTER: vprofile-eks

  4. Felépítés: Job-ok és Steps-ek
       Jobs szintaxis:

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

  5. Lépések (steps)
       a. Kód letöltése (Checkout):

steps:
  - name: Checkout source code
    uses: actions/checkout@v4	# Forrás: https://github.com/marketplace/actions/checkout

       b. Terraform telepítése GitHub Action segítségével:

  - name: Setup Terraform with specified version on the runner
    uses: hashicorp/setup-terraform@v2	# Forrás: https://github.com/marketplace/actions/hashicorp-setup-terraform?version=v2.0.3
    #with:
    #  terraform_version: 1.6.3

Futók (Runners)
  A GitHub biztosít előre elkészített futókat, például:
    ubuntu-latest – ez tartalmaz sok előtelepített csomagot.
  Minden futás egy konténerben történik, ide kerül a forráskód és a parancsok végrehajtása.

Fontos megjegyzések
  A forráskódot mindig le kell ellenőrizni (checkout), még ha saját tárolón belül vagyunk is.
  A setup-terraform művelet automatikusan telepíti a kívánt verziót.
  Az env változók révén adhatjuk át az AWS hitelesítő adatokat és más beállításokat.

1. Terraform Init
     Létrehoztatok egy lépést a terraform init futtatására.
     A backend bucket nevét környezeti változóból ($BUCKET_TF_STATE) vettétek.
     Ez beállítja, hogy a Terraform hol tárolja az állapotot (pl. S3).

  - name: Terraform init
    id: init
    run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

2. Terraform Format Check (terraform fmt -check)
     Formázási ellenőrzés, ami csak akkor megy át, ha a .tf fájlok megfelelnek a hivatalos formátumnak.
     Ha nem, a lépés hibát dob, és a workflow megbukik.

  - name: Terraform format
    id: fmt
    run: terraform fmt -check

3. Terraform Validate
     Ellenőrzi a konfiguráció szintaktikai helyességét.
     Ez már nem csak formázás, hanem a HCL logikai struktúráját is vizsgálja.

  - name: Terraform validate
    id: validate
    run: terraform validate

4. Terraform Plan
     Száraz futtatás (terraform plan) --no-color, -input=false, -out=tfplan opciókkal.
     Ezzel elkerülhetők az interaktív kérdések és a színes kimenet.
     A kimenet fájlba kerül, amit majd az apply használhat.

  - name: Terraform plan
    id: plan
    run: terraform plan -no-color -input=false -out planfile
    continue-on-error: true

5. Plan kimenet ellenőrzése
     A steps.plan.outcome == 'failure' feltétellel egy explicit hibakezelő lépés van.
     Ha a plan hibázik, a munkafolyamat kilép (exit 1), ezzel meghiúsítva a folytatást.

  - name: Terraform plan status
    id: steps.plan.outcome == 'failure'
    run: exit 1

Mentés:
  VSCode-ban ctrl+s -> Source Control -> Commit&Push
  Commit üzenet javaslat:
  "staging workflow"
   pipa -> save
  Vagy ha terminálban csináltad akkor
    git add .
    git commit -m "staging workflow"
    git push origin stage

6. Alkalmazás a staging-en nem történik meg
     A staging ágban csak a plan fut, az apply nem.
     A változások tesztelhetők, de még nem történik véglegesítés az infrastruktúrában.

7. Tesztelés GitHub Actions segítségével
     Kisebb változtatással (pl. komment a variables.tf-ben) tesztelted, hogy a workflow kiváltódik-e.
     A workflow csak akkor fut le, ha a módosítás a terraform mappában történik és az ágon push történik.

Amit ki lehet emelni tanulságként:
  Terraform best practice: mindig használj terraform fmt, validate, plan lépéseket.
  GitHub Actions: a step.id megadása segíti a következő lépésekben az if feltételek, vagy a step.outputs használatát.
  Biztonság és tisztaság: környezeti változók használata a bucket és más érzékeny adatok kezelésére.
  Tiszta naplózás: színek nélkül, interakciómentesen fut, így automatizált környezetben is jól viselkedik.
  Apply csak main-en: staging csak plan-t futtat, élesítés csak a main ágon történik – ez jó gyakorlat.

# Main Workflow – Infrastruktúra létrehozása és deploy folyamata-----------------------------------

1. Infrastruktúra alkalmazása (Terraform Apply)
     A teljes VPC és EKS fürt létrehozása Terraformmal történik.
     Ez valódi költségekkel járhat az AWS számlán.
     A Terraform apply csak akkor fut, ha push történik a main ágra.

2. Feltételhez kötött futtatás
     A Terraform Apply parancs:

terraform apply -auto-approve -input=false -parallelism=1 planfile

     Csak akkor fut le, ha:
       A GitHub ref == refs/heads/main
       Az esemény push típusú (github.event_name == 'push')

       - name: Terrafrom Apply
         id: apple
         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
         run: terraform apply -auto-approve -input=false -parallelism=1 planfile

3. Ingress Controller telepítése (kubectl)
     Szükség van az Nginx Ingress Controller telepítésére:

kubectl apply -f ingress-controller.yaml

Előfeltétele: kubeconfig fájl rendelkezésre állása:

aws eks update-kubeconfig --region <region> --name <cluster-name>

       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ env.AWS_REGION }}

       - name: Get Kube config file
         id: getconfig
         if: steps.apple.outcome == 'success'
         run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

       - name: Install Ingress controller
         if: steps.apple.outcome == 'success' && steps.getconfig.outcome == 'success'
         run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml

4. AWS CLI hitelesítés
     Az AWS CLI futtatásához a következőkre van szükség:
       Access key és Secret key
       Ezeket a GitHub Actions workflow-ban adjuk át környezeti változóként

5. Feltételes parancs végrehajtás
   A kubectl apply parancs csak akkor fut le, ha:
     A Terraform Apply sikeres (steps.apply.result == success)
     A kubeconfig lekérése sikeres (steps.getconfig.result == success)

Mentés:
  VSCode-ban ctrl+s -> Source Control -> Commit&Push
  Commit üzenet javaslat:
  "terraform apply steps included"
   pipa -> save
  Vagy ha terminálban csináltad akkor
    git add .
    git commit -m "terraform apply steps included"
    git push origin stage

Tesztelés és Workflow működés
  6. Tesztelés staging ágon
       A staging ágon csak a terraform plan fut le.
       Mivel nem a main ág, ezért terraform apply nem történik.

  7. Módosítások staging ágon
       Kisebb módosítást hajtunk végre, pl. a variables.tf fájlban
       Commit és push a staging ágra -> csak a plan fut

  8. Merge staging -> main
       Lokálisan a staging ág egyesítése a main ággal. nyísuk meg a terminált

cd Desktop/Krissz91/main-iac	# (main ágban leszel)
git pull
git status			# így is látható, hogy a main ágban vagyunk
ls				# README.md és terraform mappát fogunk látni
git checkout stage		# stage-be lépünk
git checkout main		# vissza lépünk a main-be
git merge stage
:wq				# ha vim szerkesztőbe lépsz így lépsz ki
git push origin main

  9. GitHub Actions workflow aktiválása
       A main ágra való push hatására elindul a workflow
       A terraform apply és az Ingress Controller telepítése megtörténik

Branch Protection (Ajánlás valós projekthez)
  A main ágra történő közvetlen push letiltása
  Pull request kötelezővé tétele (branch protection rule)
  Merge előtt review és validáció szükséges

Telepítés utáni állapot (AWS konzolban ellenőrizhető)
  Létrejött:
    EKS klaszter
    Csomópontcsoport(ok)
    VPC, alhálózatok (public/private)
    NAT gateway + elastic IP
    Nginx Ingress Controller -> Load Balancer
  Az EC2-ben láthatók az aktív Kubernetes node-ok is

Pull Request Workflow (ajánlott gyakorlat)
  Staging ágból -> Pull Request a main ágba
  A PR automatikusan validálható és összeolvasható
  Merge után ismét fut a GitHub Actions -> terraform apply


# Általános workflow áttekintés--------------------------------------------------------------------

  EKS fürt létrehozva, készen áll a használatra.
  Terraform változtatások workflow-on keresztül alkalmazódnak
  (először stage-en tesztelve, majd main ágba mergelve deploy).
  Az alkalmazás (Vprofile) egy külön Git tárolóban van, ahol külön workflow kezeli a CI/CD folyamatokat.

CI/CD Workflow lépései az alkalmazásnál
  1. Forráskód lehívása GitHub Actions használatával.
  2. Kód tesztelése:
       mvn test – egységtesztek.
       mvn checkstyle:checkstyle – kódstílus ellenőrzés.
  3. Kódelemzés SonarCloud segítségével:
       SonarScanner CLI használatával.
       Feltöltés a SonarCloudra (kód, checkstyle, teszt reportok).
  4. Minőségkapu ellenőrzés (Quality Gate):
       Alapértelmezett Quality Gate-et használ.
       Hiba esetén saját Quality Gate is beállítható.

SonarCloud beállítása
  Fiók létrehozása: https://sonarcloud.io
  Új szervezet (pl. Name/Key: vprofile-actions91) és projekt (Name/Key: vproapp91) létrehozása.
  Token generálása (gitops) és GitHub Secrets-ben elmentve:
    SONAR_TOKEN = pl.: 886271fdbada1a4f49cd252ef3f051f281260663
    SONAR_ORGANIZATION = vprofile-actions91
    SONAR_PROJECT_KEY = vproapp91
    SONAR_URL = https://sonarcloud.io

Docker és Kubernetes
  VSCode-ot nyisd meg -> Open Folder (/Desktop/Krissz91/vprofile-action)
  Dockerfile: alkalmazás kép létrehozása Tomcat alapon.
  Kubernetes YAML fájlok a telepítéshez (korábbi projektekből átvett logika).
  Helm chart segítségével parametrizálható telepítés.
    values.yaml fájlban adhatók meg változók.
  NGINX ingress controller már telepítve (EKS setup során).
    Használatával az app elérhető pl. vprofile.thehkh.com címen.
    Saját domaint kell megadni a Ingress fájlban.

GitHub Actions Workflow fájl
  Útvonal: .github/workflows/main.yml
  Munkafolyamat neve: vprofile actions
  Trigger: kezdetben workflow_dispatch (kézi indítás), később push.
  Fontos környezeti változók:
    AWS_REGION (pl. us-east-1)
    ECR_REPOSITORY (pl. vprofileapp)
    EKS_CLUSTER (pl. vprofile-eks)

Workflow lépések részletezése
1. Tesztelési job
     runs-on: ubuntu-latest
     Lépések:
       1.Checkout kód.
       2. Maven teszt (mvn test).
       3. Maven checkstyle (mvn checkstyle:checkstyle).
       4. Java 11 beállítása (actions/setup-java).
       5. SonarScanner CLI beállítása (warchant/setup-sonar-scanner).
       6. sonar-scanner parancs futtatása titkos változókkal.
       7. Quality Gate ellenőrzés (SonarSource/sonarcloud-quality-gate-action).

Mentés:
  VSCode-ban ctrl+s -> Source Control -> Commit&Push
  Commit üzenet javaslat:
  "Code test"
   pipa -> save
  Vagy ha terminálban csináltad akkor (persz győződj meg róla, hogy a vprofile-actions mappában csináltad a main.yml fájlt és töltöd fel)
    git add .
    git commit -m "Code test"
    git push origin main
   
Menj a repoba -> Actions -> vprofile actions -> Run workflow

Tipikus hibák és javítások:
  Hiba: SONAR_URL titok hiányzik -> hozzá kell adni (https://sonarcloud.io).
  Quality Gate hiba:
    Átmeneti megoldás: Quality Gate ellenőrzés eltávolítása.
    Jobb megoldás: új, saját Quality Gate létrehozása és hozzárendelése a projekthez.

# Docker Image Build és ECR-re való Publikálás összefoglaló----------------------------------------

Miután a kód sikeresen lefutott és a tesztek is rendben vannak,
a következő lépés a Docker image elkészítése és feltöltése az AWS ECR (Elastic Container Registry)-be.

1. Új GitHub Actions munka: BUILD_AND_PUBLISH szakasz a main.yaml-ban.
     Hozzunk létre egy új munkát BUILD_AND_PUBLISH néven.
     Ez csak a TEST nevű munka után fusson, ehhez a needs: TEST kulcsot kell használni.
     A runs-on: ubuntu-latest legyen megadva.

2. Lépések:
     Első lépés: a forráskód checkout-ja a szokásos actions/checkout@v4 GitHub Action-nel.
     A Docker image építéséhez és ECR-be tolásához az appleboy/docker-ecr-action action-t használjuk.

3. Konfiguráció az appleboy/docker-ecr-action használatához:
Forrás: https://github.com/marketplace/actions/docker-ecr

- name: Build and Push Docker Image
  uses: appleboy/docker-ecr-action@master
  with:
    access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    registry: ${{ secrets.AWS_REGISTRY_URI }}
    repo: ${{ env.ECR_REPOSITORY }}
    region: ${{ env.AWS_REGION }}
    tags: latest,${{ github.run_number }}
    dockerfile: ./Dockerfile
    context: .

Mentés:
  VSCode-ban ctrl+s -> Source Control -> Commit&Push
  Commit üzenet javaslat:
  "Build and publish to ecr"
   pipa -> save
  Vagy ha terminálban csináltad akkor
    git add .
    git commit -m "Build and publish to ecr"
    git push origin main

Menj a repoba -> Actions -> vprofile actions -> Run workflow

4. Fontos változók:
     REGISTRY URI, ECR_REPOSITORY, AWS_REGION már előre definiálva vannak környezeti változóként.
     Tagek: latest és a build egyedi azonosítója github.run_number alapján (pl. 6).

5. Hibakezelés:
     Figyeljünk a YAML behúzásokra, mert egy rossz indentálás (pl. lépések steps: alatt) hibát okozhat.
     A GitHub Actions rögtön visszajelzést ad, ha hiba van a YAML fájlban.

6. Eredmény:
     Sikeres build után az image feltöltődik az ECR-be.
     Megjelenik benne a latest és a run_number szerinti tag is.
     Minden új commit esetén új tesztelés, új build, és új image készül az ECR-ben.

# Helm chartok létrehozása és telepítése EKS-re GitHub Actions segítségével------------------------

Cél:
Ebben a fejezetben a Kubernetes definíciós fájlokat fogjuk Helm chartokká alakítani,
és megtanuljuk, hogyan lehet ezeket a Helm chartokat telepíteni az EKS klaszterre egy
GitHub Actions munkafolyamaton keresztül, dinamikus image címkézéssel.

1. Helm telepítése
Forrás: https://helm.sh/docs/intro/install/
macOS esetén:

brew install helm

Windows esetén (Admin jogosultságú PowerShell):

choco install kubernetes-helm

2. Helm chartok létrehozása
Navigáljunk a projekt gyökérmappájába:

cd ~/Desktop/Krissz91/vprofile-action

Hozzuk létre a chartot:

helm create vprofilecharts
ls				# Megjelenik egy vprofilecharts nevű mappa

Mozgassuk ezt egy külön helm mappába:

mkdir helm
mv vprofilecharts helm/

3. Alapértelmezett template-ek törlése
Töröljük a templates/ mappában lévő alapértelmezett fájlokat:

rm -rf helm/vprofilecharts/templates/*

4. Saját Kubernetes YAML fájlok másolása
Másoljuk be a meglévő definíciós fájlokat:

cp kubernetes/vpro-app/* helm/vprofilecharts/templates/
ls helm/vprofilecharts/templates/			# Ott lesz mind a 10 K8s yaml fájl

5. Helm változók használata a definíciós fájlban
Nyissuk meg a fő telepítési fájlt:

cd helm/vprofilecharts/templates/
nano vproappdep.yml

Cseréljük ki a hardkódolt image nevet a következő változókra:

image: "{{ .Values.appimage }}:{{ .Values.apptag }}"		# 19.sor

Ezeket a változókat később a Helm parancs futtatásakor fogjuk átadni --set kapcsolóval.
A values.yaml fájlban nem szükséges most megadni ezeket.

6. Helm chart telepítés – elméleti példa
A következő parancs manuálisan telepítené a chartot (nem szükséges lefuttatni):

helm install vprofile-stack helm/vprofilecharts --set appimage=<image_uri> --set apptag=<tag>

7. Helm chart telepítése GitHub Actions segítségével
Most visszatérünk a GitHub Actions workflow-hoz, ahol hozzáadjuk az utolsó munkát:
a telepítést EKS-re Helm chart segítségével.

De előtte:
Két fontos előkészületi lépés szükséges:
  1. kubeconfig létrehozása
  2. ECR hitelesítő adatok létrehozása Kubernetes titokként

8. Workflow lépések – DeployToEKS
1. Forráskód letöltése
A repo és chartok eléréséhez.

2. AWS hitelesítés

- name: Configure AWS Credentials
  uses: aws-actions/configure-aws-credentials@v1
  with:
    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
    aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
    aws-region: ${{ secrets.AWS_REGION }}

3. kubeconfig generálás

   - name: Get Kube config file
     run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

   - name: Print config file
     run: cat ~/.kube/config

Ne jelenítsd meg a .kube/config tartalmát workflow-ban – ez biztonsági kockázat!

4. Docker registry titok létrehozása

- name: Login to ECR
     run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password)

5. Helm chart telepítése GitHub Action segítségével
Forrás: https://github.com/marketplace/actions/deploy-helm-chart-to-aws-eks-cluster

- name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack

Mentés:
  VSCode-ban ctrl+s -> Source Control -> Commit&Push
  Commit üzenet javaslat:
  "Deploy helm charts"
   pipa -> save
  Vagy ha terminálban csináltad akkor
    git add .
    git commit -m "Deploy helm charts"
    git push origin main

Menj a repoba -> Actions -> vprofile actions -> Run workflow

9. Ingress és domain beállítás
Az Ingress fájlban megadott vprofile.thehk.com domaint konfigurálni kell:
  Keressük meg az EKS-ben létrejött NGINX ingress controller által generált Load Balancer DNS nevet.
  Lépj be a domain szolgáltatódhoz (pl. GoDaddy).
  Hozz létre egy CNAME rekordot:
    Név: vprofile
    Érték: Load Balancer DNS neve
Ne feledd: akár 5-10 perc is lehet, míg a DNS rekord életbe lép.

10. Webalkalmazás elérése
Ha minden jól ment:
  Nyisd meg a böngészőt: http://vprofile.thehk.com	# Gyakori hiba: Figyelj, hogy ne https legyen hanem http! (80-as porton van nem pedig 443-ason)
  Jelentkezz be:
    Felhasználónév: admin_vp
    Jelszó: admin_vp

Gratulálok! A webalkalmazás sikeresen elérhető az EKS klaszteren keresztül, teljesen automatizált CI/CD csővezetéssel.

Összefoglalás:
  Helm chartokat hoztunk létre és paraméterizáltunk.
  Automatikus Helm deploy-t valósítottunk meg GitHub Actions segítségével.
  Az ECR image URI-t és címkét dinamikusan adtuk át.
  A végső alkalmazás publikus domainen keresztül is elérhető lett.
